<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>html</string>
	</array>
	<key>injectionSelector</key>
	<string>text.html.django string.quoted, text.html.django meta.tag.block.*.html, text.html.django source.js.embedded</string>
	<key>keyEquivalent</key>
	<string>^~H</string>
	<key>name</key>
	<string>HTML (Django)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>Since html is valid in Django templates include the html patterns</string>
			<key>include</key>
			<string>text.html.basic</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>({%) (verbatim) (%})</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>.*</string>
							<key>name</key>
							<string>support.other.django.template.tag.block.builtin</string>
						</dict>
					</array>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Verbatim block effectively deactivates all Django template syntax.</string>
			<key>contentName</key>
			<string>meta.verbatim.django.template</string>
			<key>end</key>
			<string>({%) (endverbatim) (%})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>text.html.basic</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>({%) (spaceless) (%})</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>.*</string>
							<key>name</key>
							<string>support.other.django.template.tag.block.builtin</string>
						</dict>
					</array>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.spaceless.django.template</string>
			<key>end</key>
			<string>({%) (endspaceless) (%})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>text.html.django</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>{% comment %}</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.django.template</string>
				</dict>
			</dict>
			<key>end</key>
			<string>{% endcomment %}</string>
			<key>name</key>
			<string>comment.block.django.template</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>{#</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.django.template</string>
				</dict>
			</dict>
			<key>end</key>
			<string>#}</string>
			<key>name</key>
			<string>comment.line.django.template</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>{{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.variable</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}}</string>
			<key>name</key>
			<string>meta.scope.django.template.variable</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;={{)\S</string>
					<key>comment</key>
					<string>Nag about bad spacing</string>
					<key>end</key>
					<string>(?=}})</string>
					<key>name</key>
					<string>invalid.illegal.spacing</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Nag about bad spacing</string>
					<key>match</key>
					<string>(?&lt;={{).*?\S(?=}})</string>
					<key>name</key>
					<string>invalid.illegal.spacing</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.spacing</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Nag about bad spacing</string>
					<key>match</key>
					<string>(?&lt;={{)(\s{2,})</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.spacing</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Nag about bad spacing</string>
					<key>match</key>
					<string>(\s{2,})(?=}})</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value_reference</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>({%)\S</string>
			<key>end</key>
			<string>(%})</string>
			<key>name</key>
			<string>invalid.illegal.spacing</string>
		</dict>
		<dict>
			<key>match</key>
			<string>({%).*?\S(%})</string>
			<key>name</key>
			<string>invalid.illegal.spacing</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>({%) (block) ([\w-]+) (%})</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.scope.django.template.tag.$2.$3</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#tag_names</string>
						</dict>
					</array>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Block tags</string>
			<key>contentName</key>
			<string>meta.scope.django.template.$2-body.$3</string>
			<key>end</key>
			<string>({%) (endblock)(| \3) (%})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#tag_names</string>
						</dict>
					</array>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>text.html.django</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>({%)(\s+)(\w+)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
				<key>2</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&lt;={%)(\s{2,})</string>
							<key>name</key>
							<string>invalid.illegal.spacing</string>
						</dict>
					</array>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#tag_names</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>comment</key>
			<string>Non-block tags</string>
			<key>end</key>
			<string>%}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.django.template.tag</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.django.template.tag.$2</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\s{2,})(?=%})</string>
					<key>name</key>
					<string>invalid.illegal.spacing</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value_reference</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>common_attribute_names</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)(keys|items|count|all|label_tag|auto_id|field|required|errors)\b</string>
					<key>name</key>
					<string>support.function.python.django</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)(id|super|counter0?)\b</string>
					<key>name</key>
					<string>support.attribute.python.django</string>
				</dict>
			</array>
		</dict>
		<key>string_quoted_double</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.django.template</string>
						</dict>
					</dict>
					<key>end</key>
					<string>((?&lt;=")(")|")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.django.template</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.empty-string.double.django.template</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.django.template</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.single-line.django.template</string>
				</dict>
			</array>
		</dict>
		<key>string_quoted_single</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.django.template</string>
						</dict>
					</dict>
					<key>end</key>
					<string>((?&lt;=')(')|')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.django.template</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.empty-string.single.django.template</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed-string.django.template</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.single-line.django.template</string>
				</dict>
			</array>
		</dict>
		<key>tag_keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(and|or|not|in)\b</string>
					<key>name</key>
					<string>keyword.operator.logical.django.template</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(\=\=|!\=|&lt;\=?|&gt;\=?)\b</string>
					<key>name</key>
					<string>keyword.operator.comparison.django.template</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(reversed|noop|only|with|by|as)\b</string>
					<key>name</key>
					<string>keyword.other.django.template</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(from)\b</string>
					<key>name</key>
					<string>keyword.control.django.template</string>
				</dict>
			</array>
		</dict>
		<key>tag_names</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b((end)?(verbatim|autoescape|block|blocktrans|filter|spaceless|templatetag|with))\b|(url|plural|debug|widthratio|firstof|now|regroup|csrf_token)\b</string>
					<key>name</key>
					<string>support.other.django.template.tag.builtin</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((end)?(for|if|ifchanged))\b|\b(empty|else|elif|include|ssi|extends|load)\b</string>
					<key>name</key>
					<string>keyword.control.django.template.builtin</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b([a-zA-Z][\w-]*)\b</string>
					<key>name</key>
					<string>entity.name.tag.django.template.custom</string>
				</dict>
			</array>
		</dict>
		<key>tag_parameters</key>
		<dict>
			<key>name</key>
			<string>meta.function-call.arguments.django.template</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.django.template</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.django.template</string>
						</dict>
						<key>4</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#value_reference</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>([a-zA-Z]\w*)((=)(.+?)(?=( [a-zA-Z]\w*\=?|$)))?</string>
				</dict>
			</array>
		</dict>
		<key>value_reference</key>
		<dict>
			<key>comment</key>
			<string>Checks for all occurrences of "varname|filter|filter"</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>this comes first in the patterns list to avoid ambiguity with context variable names</string>
					<key>match</key>
					<string>\b(True|False|None)\b</string>
					<key>name</key>
					<string>constant.constant.language.python</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.django.template</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>Add scope for django-supplied context names</string>
									<key>match</key>
									<string>\b(request|kwargs|perms|view|object_list|object|forloop|STATIC_URL|MEDIA_URL)\b</string>
									<key>name</key>
									<string>support.variable.django.template</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>comment</key>
							<string>Attribute access from context variable.</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#common_attribute_names</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>([a-zA-Z]\w*)((?:\.[a-zA-Z]\w*)*)</string>
					<key>name</key>
					<string>meta.value.django.template</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.filter.django</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.django.template.filter</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\b(add|addslashes|capfirst|center|cut|date|default|default_if_none|dictsort|dictsortreversed|divisibleby|escapejs|escape|filesizeformat|first|fix_ampersands|floatformat|get_digit|join|length|length_is|linebreaks|linebreaksbr|linenumbers|ljust|lower|make_list|phone2numeric|pluralize|pprint|random|removetags|rjust|safe|slice|slugify|stringformat|striptags|time|timesince|title|truncatewords|unordered_list|upper|urlencode|urlize|urlizetrunc|wordcount|wordwrap|yesno)\b</string>
									<key>name</key>
									<string>support.function.django.template.filter</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.filter-argument.template.filter</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Filter syntax</string>
					<key>match</key>
					<string>(\|)([a-zA-Z]\w*)(:)?</string>
					<key>name</key>
					<string>meta.filter.django.template</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([1-9]+[0-9]*|0)</string>
					<key>name</key>
					<string>constant.numeric.integer.decimal.python</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_quoted_double</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_quoted_single</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>text.html.django</string>
	<key>uuid</key>
	<string>0D8A41F2-14E7-4F5E-B99D-870D57B9DAE6</string>
</dict>
</plist>
